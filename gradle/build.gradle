import ch.so.agi.gretl.api.*
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply plugin: "ch.so.agi.gretl"
apply plugin: "de.undercouch.download"

defaultTasks "refreshMatviewsOEREBWMS"

def GROUP = "xtf_import"
def pathToTempFolder = System.getProperty("java.io.tmpdir")

// Oereb: Datenumbau Nutzungsplanung
ext {
    //dbUriEdit = "jdbc:postgresql://localhost:54321/edit"
    //dbUserEdit = "gretl"
    //dbPwdEdit = "gretl"
    /************************************************************/
    dbUriOereb_devel = "jdbc:postgresql://db:5432/oereb"
    dbUserOereb_devel = "gretl"
    dbPwdOereb_devel = "gretl"
    /************************************************************/

}

//AV import from edit db
task transferAV(type: Db2Db){
    description = "Datenübertrag ins AV-Bundesmodell."    
    group = GROUP
    sourceDb = [dbUriEditdb, dbUserEditdb, dbPwdEditdb]
    targetDb = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    transferSets = [
            new TransferSet("/tmp/select_av_dataset_entries.sql", 'live.t_ili2db_dataset', false),
            new TransferSet("/tmp/select_av_basket_entries.sql", 'live.t_ili2db_basket', false),
            new TransferSet("/tmp/select_gemeindegrenzen_gemnachfuehrung.sql", 'live.dm01vch24lv95dgemeindegrenzen_gemnachfuehrung', true),
            new TransferSet("/tmp/select_gemeindegrenzen_gemeinde.sql", 'live.dm01vch24lv95dgemeindegrenzen_gemeinde', true),
            new TransferSet("/tmp/select_gemeindegrenzen_gemeindegrenze.sql", 'live.dm01vch24lv95dgemeindegrenzen_gemeindegrenze', true),
            new TransferSet("/tmp/select_liegenschaften_lsnachfuehrung.sql", 'live.dm01vch24lv95dliegenschaften_lsnachfuehrung', true),
            new TransferSet("/tmp/select_liegenschaften_grundstueck.sql", 'live.dm01vch24lv95dliegenschaften_grundstueck', true),
            new TransferSet("/tmp/select_liegenschaften_liegenschaft.sql", 'live.dm01vch24lv95dliegenschaften_liegenschaft', true),
            new TransferSet("/tmp/select_gebaeudeadressen_gebnachfuehrung.sql", 'live.dm01vch24lv95dgebaeudeadressen_gebnachfuehrung', true),
            new TransferSet("/tmp/select_gebaeudeadressen_lokalisation.sql", 'live.dm01vch24lv95dgebaeudeadressen_lokalisation', true),
            new TransferSet("/tmp/select_gebaeudeadressen_lokalisationsname.sql", 'live.dm01vch24lv95dgebaeudeadressen_lokalisationsname', true),
            new TransferSet("/tmp/select_gebaeudeadressen_gebaeudeeingang.sql", 'live.dm01vch24lv95dgebaeudeadressen_gebaeudeeingang', true)
    ];        
}

//AV import from edit db
task transferPLZO(type: Db2Db, dependsOn: "transferAV"){
    description = "Datenübertrag PLZ-Ortschaften."    
    group = GROUP
    sourceDb = [dbUriEditdb, dbUserEditdb, dbPwdEditdb]
    targetDb = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    transferSets = [
            new TransferSet("/tmp/select_plzortschaft_osnachfuehrung.sql", 'live.plzoch1lv95dplzortschaft_osnachfuehrung', true),
            new TransferSet("/tmp/select_plzortschaft_ortschaftsverbund.sql", 'live.plzoch1lv95dplzortschaft_ortschaftsverbund', true),
            new TransferSet("/tmp/select_plzortschaft_ortschaft.sql", 'live.plzoch1lv95dplzortschaft_ortschaft', true),
            new TransferSet("/tmp/select_plzortschaft_ortschaftsname.sql", 'live.plzoch1lv95dplzortschaft_ortschaftsname', true),
            new TransferSet("/tmp/select_plzortschaft_plz6nachfuehrung.sql", 'live.plzoch1lv95dplzortschaft_plz6nachfuehrung', true),
            new TransferSet("/tmp/select_plzortschaft_plz6.sql", 'live.plzoch1lv95dplzortschaft_plz6', true)
    ];        
}

//AV import from edit db
task transferGBKreis(type: Db2Db, dependsOn: "transferPLZO"){
    description = "Datenübertrag Grundbuchkreise."    
    group = GROUP
    sourceDb = [dbUriPubdb, dbUserPubdb, dbPwdPubdb]
    targetDb = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    transferSets = [
            new TransferSet("/tmp/select_grundbuchkreise.sql", 'live.so_g_v_0180822grundbuchkreise_grundbuchkreis', true),
            new TransferSet("/tmp/select_nachfuehrungskreise_gemeinde.sql", 'live.so_g_v_0180822nachfuehrngskrise_gemeinde', true)
    ];        
}

task downloadFederalLegalBasis(type: Download) {
    description = "Download Bundesgesetze."
    src "http://models.geo.admin.ch/V_D/OeREB/OeREBKRM_V1_1_Gesetze_20180501.xml"
    dest pathToTempFolder
    overwrite true      
}

task "importFederalLegalBasisToOereb"(type: Ili2pgReplace, dependsOn: 'downloadFederalLegalBasis') {
    description = "Import Bundesgesetze."
    database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    models = "OeREBKRMvs_V1_1"
    dbschema = "live"
    dataFile = file(Paths.get(pathToTempFolder.toString(), "OeREBKRM_V1_1_Gesetze_20180501.xml"))
    dataset = "ch.admin.bk.gesetze" 
    disableValidation = true
}


// Gesetze und zuständige Stellen bei jeder Änderung in Transferstruktur in der Edit-DB importieren
task "downloadKantonaleGesetze"(type: Download, dependsOn: "importFederalLegalBasisToOereb"){
    description = "Download kantonale Gesetze "
    src "https://geo.so.ch/geodata/ch.so.sk.gesetze.oereb/ch.so.sk.gesetze.xtf"
    dest pathToTempFolder
    overwrite true
}


task importCantonalLegalBasis(type: Ili2pgReplace, dependsOn: "downloadKantonaleGesetze"){
    description = "Import kantonale Gesetze"
    group = GROUP
    database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    models = "OeREBKRMvs_V1_1"
    dbschema = "live"
    dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.sk.gesetze.xtf"))
    dataset = "ch.so.sk.legal_basis" // Anderes (in diesem Fall beliebig) Dataset, da die dazugehörigen Daten nicht Bestandteil des Transfers (des exportierten Files) sein dürfen.
    disableValidation = true
}

task downloadZustaendigeStellen(type: Download, dependsOn: "importCantonalLegalBasis"){
    description = "Download zuständige Stellen"
    group = GROUP
    src "https://geo.so.ch/geodata/ch.so.agi.zustaendigestellen.oereb/ch.so.agi.zustaendigestellen.xtf"
    dest pathToTempFolder
    overwrite true
}

task importZustaendigeStellen(type: Ili2pgReplace, dependsOn: 'downloadZustaendigeStellen'){
    description = "Import zuständige Stellen"
    group = GROUP
    database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    models = "OeREBKRMtrsfr_V1_1"
    dbschema = "live"
    dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.agi.zustaendigestellen.xtf"))
    dataset = "ch.so.arp.nutzungsplanung" // Gleiches Dataset wie anschliessend die Daten des Datenumbaues, da Ämterinformationen Bestandteil des Transfers sein müssen. TODO: Herausforderung pro Gemeinde in Verbindung mit der/den fehlenden zuständigen Stelle(n)
    disableValidation = true
}

// Annex data import
task downloadAnnexAktiveGemeinden(type: Download, dependsOn: "importZustaendigeStellen"){
    description = "Download Annex Data Aktive Gemeinden"
    group = GROUP
    src "https://geo.so.ch/geodata/ch.so.agi.extractannex.oereb/ch.so.agi.OeREB_extractAnnex-AktiveGemeinden.xtf"
    dest pathToTempFolder
    overwrite true
}

task importAnnexAktiveGemeinden(type: Ili2pgReplace, dependsOn: 'downloadAnnexAktiveGemeinden'){
    description = "Import Annex Data Aktive Gemeinden"
    group = GROUP
    database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    models = "OeREB_ExtractAnnex_V1_0"
    dbschema = "live"
    dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.agi.OeREB_extractAnnex-AktiveGemeinden.xtf"))
    dataset = "ch.so.agi.oereb_extract_annex.aktive_gemeinden"
    disableValidation = true
}

task downloadAnnexKatasterAmt(type: Download, dependsOn: "importAnnexAktiveGemeinden"){
    description = "Download Annex Data Katasteramt"
    group = GROUP
    src "https://geo.so.ch/geodata/ch.so.agi.extractannex.oereb/ch.so.agi.OeREB_extractAnnex-KatatasterAmt.xtf"
    dest pathToTempFolder
    overwrite true
}

task importAnnexKatasteramt(type: Ili2pgReplace, dependsOn: 'downloadAnnexKatasterAmt'){
    description = "Import Annex Data Katasteramt"
    group = GROUP
    database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    models = "OeREB_ExtractAnnex_V1_0"
    dbschema = "live"
    dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.agi.OeREB_extractAnnex-KatatasterAmt.xtf"))
    dataset = "ch.so.agi.oereb_extract_annex.katasteramt"
    disableValidation = true
}

task downloadAnnexStammdaten(type: Download, dependsOn: "importAnnexKatasteramt"){
    description = "Download Annex Stammdaten"
    group = GROUP
    src "https://geo.so.ch/geodata/ch.so.agi.extractannex.oereb/ch.so.agi.OeREB_extractAnnex-Stammdaten.xtf"
    dest pathToTempFolder
    overwrite true
}

task importAnnexStammdaten(type: Ili2pgReplace, dependsOn: 'downloadAnnexStammdaten'){
    description = "Import Annex Stammdaten"
    group = GROUP
    database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    models = "OeREB_ExtractAnnex_V1_0"
    dbschema = "live"
    dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.agi.OeREB_extractAnnex-Stammdaten.xtf"))
    dataset = "ch.so.agi.oereb_extract_annex.stammdaten"
    disableValidation = true
}

// Download Nutzungsplanung Grundnutzung Transferstruktur
task "downloadNutzungsplanungGrundnutzungTrsfr"(type: Download, dependsOn: "importAnnexStammdaten"){
    description = "Download Nutzungsplanung Grundnutzung Transferstruktur"
    // src "https://raw.githubusercontent.com/sogis/oerebdaten/master/oereb_npl/ch.so.arp.nutzungsplanung.oereb.xtf"
    src "https://s3.eu-central-1.amazonaws.com/ch.so.arp.nutzungsplanung.oereb-dev/ch.so.arp.nutzungsplanung.oereb.xtf"
    dest pathToTempFolder
    overwrite true
}

// Import Nutzungsplanung Grundnutzung Transferstruktur
task xtf_import(type: Ili2pgReplace, dependsOn: "downloadNutzungsplanungGrundnutzungTrsfr"){
    description = "Import benötigte NPL-Daten in Entwicklungs-DB"
    group = GROUP
    database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    dbschema = "live"
    dataFile = file(Paths.get(pathToTempFolder.toString(), "ch.so.arp.nutzungsplanung.oereb.xtf"))
    dataset = "9999"
    disableValidation = true
    strokeArcs = true
}

// Refresh der OEREB-WMS Materialized Views
task refreshMatviewsOEREBWMS(type: SqlExecutor, dependsOn: "xtf_import"){
    description = "Aktualisierung der materialized views fuer OEREB-WMS nach XTF-Import"
    group = GROUP
    database = [dbUriOereb_devel, dbUserOereb_devel, dbPwdOereb_devel]
    sqlFiles = ["/tmp/refresh_oereb-wms_materialized_views.sql"]
}
